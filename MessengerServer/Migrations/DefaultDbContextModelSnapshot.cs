// <auto-generated />
using System;
using MessengerServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessengerServer.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MessengerServer.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<string>("ChatName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("chat_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ChatId")
                        .HasName("PRIMARY");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.ChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatId" }, "FK_chat_members_chats");

                    b.HasIndex(new[] { "UserId" }, "FK_chat_members_users");

                    b.ToTable("chat_members", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("file_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("file_type");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_url");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("FileId")
                        .HasName("PRIMARY");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("file_id");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatId" }, "FK_messages_chats");

                    b.HasIndex(new[] { "FileId" }, "FK_messages_files");

                    b.HasIndex(new[] { "SenderId" }, "FK_messages_users");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.MessageStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MessageId" }, "FK_message_statuses_messages");

                    b.HasIndex(new[] { "UserId" }, "FK_message_statuses_users");

                    b.ToTable("message_statuses", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MessengerServer.Models.ChatMember", b =>
                {
                    b.HasOne("MessengerServer.Models.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_chat_members_chats");

                    b.HasOne("MessengerServer.Models.User", "User")
                        .WithMany("ChatMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_chat_members_users");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MessengerServer.Models.Message", b =>
                {
                    b.HasOne("MessengerServer.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("FK_messages_chats");

                    b.HasOne("MessengerServer.Models.File", "File")
                        .WithMany("Messages")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_messages_files");

                    b.HasOne("MessengerServer.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_messages_users");

                    b.Navigation("Chat");

                    b.Navigation("File");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MessengerServer.Models.MessageStatus", b =>
                {
                    b.HasOne("MessengerServer.Models.Message", "Message")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_message_statuses_messages");

                    b.HasOne("MessengerServer.Models.User", "User")
                        .WithMany("MessageStatuses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_message_statuses_users");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MessengerServer.Models.Chat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MessengerServer.Models.File", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MessengerServer.Models.Message", b =>
                {
                    b.Navigation("MessageStatuses");
                });

            modelBuilder.Entity("MessengerServer.Models.User", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("MessageStatuses");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
